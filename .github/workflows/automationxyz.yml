name: XYZ Bank CI & Test Results Notification

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1024m -XX:MaxPermSize=512m'

jobs:
  # Job 1: Run the Java Selenium Tests
  run_tests:
    name: Run Selenium Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: ‚¨á Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Display Environment Info
        run: |
          echo "Java Version: $(java -version)"
          echo "Maven Version: $(mvn -version)"
          echo "Chrome Version: $(google-chrome --version)"
          echo "OS Info: $(uname -a)"

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Project with Maven
        run: mvn clean compile -DskipTests

      - name: Run Selenium Tests
        run: mvn clean test -Dtest.environment=ci
        continue-on-error: true

      - name: Generate Allure Report
        if: always()
        run: |
          # Try to generate Allure report, continue if it fails
          mvn allure:install || echo "Allure install failed, skipping report generation"
          mvn allure:report || echo "Allure report generation failed, check basic Surefire reports"
        continue-on-error: true

      - name: Archive Test Results (Surefire)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-surefire
          path: |
            target/surefire-reports/
            target/site/surefire-report.html
          retention-days: 30

      - name: Generate Basic HTML Report (Fallback)
        if: always()
        run: |
          # Generate basic Maven site report as fallback
          mvn surefire-report:report-only || echo "Surefire report generation failed"
          mvn site:site -DgenerateReports=false || echo "Site generation failed"
        continue-on-error: true

      - name: Archive Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: target/allure-results/
          retention-days: 30

      - name: Archive Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: target/allure-report/
          retention-days: 30

      - name: Upload Allure Report to GitHub Pages (Optional)
        if: always() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report
          destination_dir: allure-report

      - name: Test Results Summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Java Version | ${{ env.JAVA_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Runner OS | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "target/surefire-reports/TEST-*.xml" ]; then
            echo "| Test Reports | Available in artifacts |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "target/allure-report" ]; then
            echo "| Allure Report | Generated successfully |" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 2: Send Slack Notification based on Test Results
  slack_notification:
      name: üì± Send Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.test.result }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          üè¶ XYZ Bank Tests ${{ needs.test.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}
          
          üìã Test Details:
          ‚Ä¢ Repository: ${{ github.repository }}
          ‚Ä¢ Branch: ${{ github.ref_name }}
          ‚Ä¢ Commit: ${{ github.sha }}
          ‚Ä¢ Author: ${{ github.actor }}
          ‚Ä¢ Workflow: ${{ github.workflow }}

      steps:
        - name: Prepare Notification Message
          id: message
          run: |
            TEST_STATUS="${{ needs.run_tests.result }}"
            REPO_NAME="${{ github.repository }}"
            COMMIT_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
            RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            BRANCH_NAME="${{ github.ref_name }}"
            ACTOR="${{ github.actor }}"

            # Determine message and color based on test status
            case $TEST_STATUS in
              "success")
                MESSAGE="‚úÖ *${REPO_NAME}* CI/CD: Tests PASSED! "
                COLOR="good"
                EMOJI="‚úÖ"
                ;;
              "failure")
                MESSAGE="‚ùå *${REPO_NAME}* CI/CD: Tests FAILED! "
                COLOR="danger"
                EMOJI="‚ùå"
                ;;
              "cancelled")
                MESSAGE=" *${REPO_NAME}* CI/CD: Tests CANCELLED! "
                COLOR="warning"
                EMOJI="üõë"
                ;;
              *)
                MESSAGE="‚ö†Ô∏è *${REPO_NAME}* CI/CD: Tests ${TEST_STATUS}! "
                COLOR="warning"
                EMOJI="‚ö†Ô∏è"
                ;;
            esac

            # Create detailed slack message
            SLACK_MESSAGE=$(cat << EOF
            {
              "text": "${MESSAGE}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${EMOJI} XYZ Bank Test Results"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${REPO_NAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${TEST_STATUS^^}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${BRANCH_NAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${COMMIT_SHA_SHORT}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\n${ACTOR}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n${{ github.workflow }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Details "
                      },
                      "url": "${RUN_URL}",
                      "style": "primary"
                    }
                  ]
                }
              ]
            }
            EOF
            )

            # Set outputs for next step
            echo "message=${MESSAGE}" >> $GITHUB_OUTPUT
            echo "color=${COLOR}" >> $GITHUB_OUTPUT
            echo "run_url=${RUN_URL}" >> $GITHUB_OUTPUT
            echo "slack_payload<<EOF" >> $GITHUB_OUTPUT
            echo "${SLACK_MESSAGE}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

        - name: Send Slack Notification
          if: always()
          uses: slackapi/slack-github-action@v1.26.0
          with:
            payload: ${{ steps.message.outputs.slack_payload }}
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

        - name: Notification Summary
          if: always()
          run: |
            echo "## Slack Notification" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Slack notification sent successfully" >> $GITHUB_STEP_SUMMARY
            echo "**Message:** ${{ steps.message.outputs.message }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** ${{ needs.run_tests.result }}" >> $GITHUB_STEP_SUMMARY
            echo "**Details:** [View workflow run](${{ steps.message.outputs.run_url }})" >> $GITHUB_STEP_SUMMARY


  # Job 3: Publish Test Results Summary (Optional)
  publish_results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: run_tests
    if: always() && github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-results-surefire
          path: test-results/

      - name: Publish Test Results to PR
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Selenium Test Results'
          path: 'test-results/*.xml'
          reporter: 'java-junit'
          fail-on-error: false